{"searchDocs":[{"title":"Event","type":0,"sectionRef":"#","url":"/phoenix/api/event","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Event","url":"/phoenix/api/event#interface","content":" class Event implements Identifiable static int on(String event, Function callback) static void once(String event, Function callback) static void off(int identifier) property String name constructor Event Event(String event, Function callback) void disable() end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Event","url":"/phoenix/api/event#static-methods","content":" on(String event, Function callback) constructs a managed handler for an event and returns the identifier for the handler, for arguments see new Event(...)once(String event, Function callback) constructs a managed handler for an event that is by default only triggered one time and then disabled, for more control you can explicitly return false from the callback function and the handler will not be disabled until you return something else, for arguments see new Event(...)off(int identifier) disables the managed handler for an event with the given identifier  ","version":"Next","tagName":"h2"},{"title":"Instance Properties​","type":1,"pageTitle":"Event","url":"/phoenix/api/event#instance-properties","content":" name read-only property for the event name  ","version":"Next","tagName":"h2"},{"title":"Constructor​","type":1,"pageTitle":"Event","url":"/phoenix/api/event#constructor","content":" new Event(String event, Function callback) constructs and binds an event to a callback function and returns the handler, you must keep a reference to the handler in order for your callback to get called, you can have multiple handlers for a single event, the callback function receives its handler as the last argument, for any additional arguments see events  ","version":"Next","tagName":"h2"},{"title":"Instance Methods​","type":1,"pageTitle":"Event","url":"/phoenix/api/event#instance-methods","content":" disable() disables the event handler  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Event","url":"/phoenix/api/event#example","content":" // Bind “appDidLaunch” event to a callback function const identifier = Event.on('appDidLaunch', (app) =&gt; { console.log('App did launch:', app.name()); // -&gt; 'App did launch: Safari' }); // Disable the handler Event.off(identifier);  ","version":"Next","tagName":"h2"},{"title":"Events","type":0,"sectionRef":"#","url":"/phoenix/api/events","content":"","keywords":"","version":"Next"},{"title":"Phoenix​","type":1,"pageTitle":"Events","url":"/phoenix/api/events#phoenix","content":" didLaunch triggered once when Phoenix has launched and the context is readywillTerminate triggered when Phoenix will terminate, use this event to perform any tasks before the application terminates  ","version":"Next","tagName":"h2"},{"title":"Device​","type":1,"pageTitle":"Events","url":"/phoenix/api/events#device","content":" ","version":"Next","tagName":"h2"},{"title":"3.0.0+​","type":1,"pageTitle":"Events","url":"/phoenix/api/events#300","content":" deviceWillSleep triggered when the device will sleepdeviceDidWake triggered when the device did wake  ","version":"Next","tagName":"h3"},{"title":"Screen​","type":1,"pageTitle":"Events","url":"/phoenix/api/events#screen","content":" screensDidChange triggered when screens (i.e. displays) are added, removed, or dynamically reconfigured  ","version":"Next","tagName":"h2"},{"title":"Space​","type":1,"pageTitle":"Events","url":"/phoenix/api/events#space","content":" spaceDidChange triggered when the active space has changed  ","version":"Next","tagName":"h2"},{"title":"Mouse​","type":1,"pageTitle":"Events","url":"/phoenix/api/events#mouse","content":" All of the following mouse events receive the corresponding Point object as the first argument for the callback function. This object is also enhanced with a modifiers array which contains the key modifiers pressed when the mouse event is triggered.  mouseDidMove triggered when the mouse has movedmouseDidLeftClick triggered when the mouse did left clickmouseDidRightClick triggered when the mouse did right clickmouseDidLeftDrag triggered when the mouse did left dragmouseDidRightDrag triggered when the mouse did right drag  ","version":"Next","tagName":"h2"},{"title":"4.0.0+​","type":1,"pageTitle":"Events","url":"/phoenix/api/events#400","content":" mouseDidOtherClick triggered when the mouse did tertiary clickmouseDidOtherDrag triggered when the mouse did tertiary drag  ","version":"Next","tagName":"h3"},{"title":"App​","type":1,"pageTitle":"Events","url":"/phoenix/api/events#app","content":" All of the following app events receive the corresponding App instance as the first argument for the callback function.  appDidLaunch triggered when an app has launchedappDidTerminate triggered when an app has terminatedappDidActivate triggered when an app has activatedappDidHide triggered when an app becomes hiddenappDidShow triggered when an app is shown (becomes unhidden)  ","version":"Next","tagName":"h2"},{"title":"Window​","type":1,"pageTitle":"Events","url":"/phoenix/api/events#window","content":" All of the following window events receive the corresponding Window instance as the first argument for the callback function.  windowDidOpen triggered when a window has openedwindowDidClose triggered when a window has closedwindowDidFocus triggered when a window was focused within an appwindowDidMove triggered when a window has movedwindowDidResize triggered when a window has resizedwindowDidMinimise or windowDidMinimize triggered when a window has minimisedwindowDidUnminimise or windowDidUnminimize triggered when a window has unminimised ","version":"Next","tagName":"h2"},{"title":"App","type":0,"sectionRef":"#","url":"/phoenix/api/app","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"App","url":"/phoenix/api/app#interface","content":" class App implements Identifiable static App get(String appName) static App launch(String appName, Map&lt;String, AnyObject&gt; optionals) static void launch(String appName, Map&lt;String, AnyObject&gt; optionals, Function callback) // 5.0.0+ static App focused() static Array&lt;App&gt; all() int processIdentifier() String bundleIdentifier() String name() Image icon() boolean isActive() boolean isHidden() boolean isTerminated() Window mainWindow() Array&lt;Window&gt; windows(Map&lt;String, AnyObject&gt; optionals) boolean activate() boolean focus() boolean show() boolean hide() boolean terminate(Map&lt;String, AnyObject&gt; optionals) end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"App","url":"/phoenix/api/app#static-methods","content":" get(String appName) returns the running app with the given name, returns undefined if the app is not currently runninglaunch(String appName, Map&lt;String, AnyObject&gt; optionals) launches and returns the app with the given name, returns undefined if unsuccessfulfocused() returns the focused appall() returns all running apps  ","version":"Next","tagName":"h2"},{"title":"5.0.0+​","type":1,"pageTitle":"App","url":"/phoenix/api/app#500","content":" launch(String appName, Map&lt;String, AnyObject&gt; optionals, Function callback) launches the app with the given name and calls the callback function if provided, the callback receives the app as the first argument or undefined if unsuccessful  ","version":"Next","tagName":"h3"},{"title":"Launch Optionals​","type":1,"pageTitle":"App","url":"/phoenix/api/app#launch-optionals","content":" focus (boolean): if set true the app will automatically be focused on launch, by default the app launches to the background  ","version":"Next","tagName":"h3"},{"title":"Instance Methods​","type":1,"pageTitle":"App","url":"/phoenix/api/app#instance-methods","content":" processIdentifier() returns the process identifier (PID) for the app, returns -1 if the app does not have a PIDbundleIdentifier() returns the bundle identifier for the appname() returns the name for the appicon() returns the icon for the appisActive() returns true if the app is currently frontmostisHidden() returns true if the app is hiddenisTerminated() returns true if the app has been terminatedmainWindow() returns the main window for the app, returns undefined if the app does not currently have a main windowwindows(Map&lt;String, AnyObject&gt; optionals) returns all windows for the app if no optionals are givenactivate() activates the app and brings its windows forward, returns true if successfulfocus() activates the app and brings its windows to focus, returns true if successfulshow() shows the app, returns true if successfulhide() hides the app, returns true if successfulterminate(Map&lt;String, AnyObject&gt; optionals) terminates the app, returns true if successful  ","version":"Next","tagName":"h2"},{"title":"Window Optionals​","type":1,"pageTitle":"App","url":"/phoenix/api/app#window-optionals","content":" visible (boolean): if set true returns all visible windows for the app, if set false returns all hidden windows for the app  ","version":"Next","tagName":"h3"},{"title":"Terminate Optionals​","type":1,"pageTitle":"App","url":"/phoenix/api/app#terminate-optionals","content":" force (boolean): if set true force terminates the app  ","version":"Next","tagName":"h3"},{"title":"Events​","type":1,"pageTitle":"App","url":"/phoenix/api/app#events","content":" See Events for a list of available events for App.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"App","url":"/phoenix/api/app#example","content":" // Launch Safari with focus App.launch('Safari', { focus: true }); // Get the focused app const focused = App.focused(); // Get all windows for the focused app const windows = focused.windows(); // Get Safari const safari = App.get('Safari');  ","version":"Next","tagName":"h2"},{"title":"Identifiable","type":0,"sectionRef":"#","url":"/phoenix/api/identifiable","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Identifiable","url":"/phoenix/api/identifiable#interface","content":" interface Identifiable int hash() boolean isEqual(AnyObject object) end   ","version":"Next","tagName":"h2"},{"title":"Instance Methods​","type":1,"pageTitle":"Identifiable","url":"/phoenix/api/identifiable#instance-methods","content":" hash() returns the hash value for the objectisEqual(AnyObject object) returns true if the given object is equal with this object  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Identifiable","url":"/phoenix/api/identifiable#example","content":" // Get the hash value for a window const hash = Window.focused().hash(); Phoenix.log(hash); // -&gt; 1668246523 // Compare equality of two windows const focusedWindow = Window.focused(); const mainSafariWindow = App.get('Safari').mainWindow(); Phoenix.log(focusedWindow.isEqual(mainSafariWindow)); // -&gt; true or false  ","version":"Next","tagName":"h2"},{"title":"Iterable","type":0,"sectionRef":"#","url":"/phoenix/api/iterable","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Iterable","url":"/phoenix/api/iterable#interface","content":" interface Iterable Object next() Object previous() end   ","version":"Next","tagName":"h2"},{"title":"Instance Methods​","type":1,"pageTitle":"Iterable","url":"/phoenix/api/iterable#instance-methods","content":" next() returns the next object or the first object when on the last oneprevious() returns the previous object or the last object when on the first one  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Iterable","url":"/phoenix/api/iterable#example","content":" // Traverse between screens starting from the main screen const nextScreen = Screen.main().next(); const previousScreen = Screen.main().previous();  ","version":"Next","tagName":"h2"},{"title":"Image","type":0,"sectionRef":"#","url":"/phoenix/api/image","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Image","url":"/phoenix/api/image#interface","content":" class Image implements Identifiable static Image fromFile(String path) end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Image","url":"/phoenix/api/image#static-methods","content":" fromFile(String path) loads an image from the given path, the path is resolved before attempting to load the image, returns undefined if unsuccessful  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Image","url":"/phoenix/api/image#example","content":" // Load an image from the file system const image = Image.fromFile('/path/to/image.png');  ","version":"Next","tagName":"h2"},{"title":"Keys","type":0,"sectionRef":"#","url":"/phoenix/api/keys","content":"","keywords":"","version":"Next"},{"title":"Special Keys​","type":1,"pageTitle":"Keys","url":"/phoenix/api/keys#special-keys","content":" Action: return, tab, space, delete, escape, help, home, pageUp, forwardDelete, end, pageDown, left, right, down and upFunction: f1 – f19Keypad: keypad., keypad*, keypad+, keypadClear, keypad/, keypadEnter, keypad-, keypad=, keypad0, keypad1, keypad2, keypad3, keypad4, keypad5, keypad6, keypad7, keypad8 and keypad9 ","version":"Next","tagName":"h2"},{"title":"Mouse","type":0,"sectionRef":"#","url":"/phoenix/api/mouse","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Mouse","url":"/phoenix/api/mouse#interface","content":" class Mouse static Point location() static boolean move(Point point) end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Mouse","url":"/phoenix/api/mouse#static-methods","content":" location() returns the cursor positionmove(Point point) moves the cursor to a given position, returns true if successful  ","version":"Next","tagName":"h2"},{"title":"Events​","type":1,"pageTitle":"Mouse","url":"/phoenix/api/mouse#events","content":" See Events for a list of available events for Mouse.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Mouse","url":"/phoenix/api/mouse#example","content":" // Get the cursor location const location = Mouse.location(); console.log('Location:', location.x, location.y); // -&gt; 'Location: 2023 301' // Move the cursor to origo Mouse.move({ x: 0, y: 0 });  ","version":"Next","tagName":"h2"},{"title":"Phoenix","type":0,"sectionRef":"#","url":"/phoenix/api/phoenix","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Phoenix","url":"/phoenix/api/phoenix#interface","content":" class Phoenix static void reload() static void set(Map&lt;String, AnyObject&gt; preferences) static void log(AnyObject... arguments) static void notify(String message) end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Phoenix","url":"/phoenix/api/phoenix#static-methods","content":" reload() manually reloads the context and any changes in the configuration filesset(Map&lt;String, AnyObject&gt; preferences) sets the preferences from the given key–value map, any previously set preferences with the same key will be overriddenlog(AnyObject... arguments) logs the arguments to the Console (app)notify(String message) delivers the message to the Notification Center  ","version":"Next","tagName":"h2"},{"title":"Events​","type":1,"pageTitle":"Phoenix","url":"/phoenix/api/phoenix#events","content":" See Events for a list of available events for Phoenix.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Phoenix","url":"/phoenix/api/phoenix#example","content":" // Reload the configuration Phoenix.reload(); // Log a message Phoenix.log('Message'); // Display a notification in Notification Center Phoenix.notify('Notice this!');  ","version":"Next","tagName":"h2"},{"title":"Key","type":0,"sectionRef":"#","url":"/phoenix/api/key","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Key","url":"/phoenix/api/key#interface","content":" class Key implements Identifiable static int on(String key, Array&lt;String&gt; modifiers, Function callback) static void once(String key, Array&lt;String&gt; modifiers, Function callback) static void off(int identifier) property String key property Array&lt;String&gt; modifiers constructor Key Key(String key, Array&lt;String&gt; modifiers, Function callback) boolean isEnabled() boolean enable() boolean disable() end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Key","url":"/phoenix/api/key#static-methods","content":" on(String key, Array&lt;String&gt; modifiers, Function callback) constructs a managed handler for a key and returns the identifier for the handler, for arguments see new Key(...)once(String key, Array&lt;String&gt; modifiers, Function callback) constructs a managed handler for a key that is by default only triggered one time and then disabled, for more control you can explicitly return false from the callback function and the handler will not be disabled until you return something else, for arguments see new Key(...)off(int identifier) disables the managed handler for a key with the given identifier  ","version":"Next","tagName":"h2"},{"title":"Instance Properties​","type":1,"pageTitle":"Key","url":"/phoenix/api/key#instance-properties","content":" key read-only property for the key character in lower case or case sensitive special keymodifiers read-only property for the key modifiers in lower case  ","version":"Next","tagName":"h2"},{"title":"Constructor​","type":1,"pageTitle":"Key","url":"/phoenix/api/key#constructor","content":" new Key(String key, Array&lt;String&gt; modifiers, Function callback) constructs and binds the key character with the specified modifiers (can be an empty list) to a callback function and returns the handler, you must keep a reference to the handler in order for your callback to get called, you can have multiple handlers for a single key combination, only one can be enabled at a time, any previous handler for the same key combination will automatically be disabled, the callback function receives its handler as the first argument and as the second argument a boolean that indicates if the key was repeated (key combination is held down)  ","version":"Next","tagName":"h2"},{"title":"Instance Methods​","type":1,"pageTitle":"Key","url":"/phoenix/api/key#instance-methods","content":" isEnabled() returns true if the key handler is enabled, by default trueenable() enables the key handler, any previous handler for the same key combination will automatically be disabled, returns true if successfuldisable() disables the key handler, returns true if successful  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Key","url":"/phoenix/api/key#example","content":" // Bind “Control + Shift + Q” to a callback function const identifier = Key.on('q', ['control', 'shift'], () =&gt; { console.log('Key combination pressed.'); }); // Disable the handler and release the key combination Key.off(identifier);  ","version":"Next","tagName":"h2"},{"title":"Point","type":0,"sectionRef":"#","url":"/phoenix/api/point","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Point","url":"/phoenix/api/point#interface","content":" struct Point property double x property double y end   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Point","url":"/phoenix/api/point#example","content":" // Read point properties const location = Window.focused().topLeft(); Phoenix.log(location.x, location.y); // -&gt; 100 0  ","version":"Next","tagName":"h2"},{"title":"Preferences","type":0,"sectionRef":"#","url":"/phoenix/api/preferences","content":"Preferences Phoenix supports the following (case sensitive) preferences: daemon (boolean): if set true Phoenix will run completely in the background, this also removes the status bar menu, defaults to falseopenAtLogin (boolean): if set true Phoenix will automatically open at login, defaults to false if no value has been previously set Set the preferences using the Phoenix object — for example: Phoenix.set({ daemon: true, openAtLogin: true }); ","keywords":"","version":"Next"},{"title":"Rectangle","type":0,"sectionRef":"#","url":"/phoenix/api/rectangle","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Rectangle","url":"/phoenix/api/rectangle#interface","content":" struct Rectangle property double x property double y property double width property double height end   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Rectangle","url":"/phoenix/api/rectangle#example","content":" // Read rectangle properties const frame = Window.focused().frame(); Phoenix.log(frame.x, frame.y, frame.width, frame.height); // -&gt; 100 0 1024 512  ","version":"Next","tagName":"h2"},{"title":"Size","type":0,"sectionRef":"#","url":"/phoenix/api/size","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Size","url":"/phoenix/api/size#interface","content":" struct Size property double width property double height end   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Size","url":"/phoenix/api/size#example","content":" // Read size properties const size = Window.focused().size(); Phoenix.log(size.width, size.height); // -&gt; 1024 512  ","version":"Next","tagName":"h2"},{"title":"Require","type":0,"sectionRef":"#","url":"/phoenix/api/require","content":"Require You can modularise your configuration using the require function. It will load the referenced JavaScript file and reload it if any changes are detected. If the path is relative, it is resolved relatively to the absolute location of the primary configuration file. If this file is a symlink, it will be resolved before resolving the location of the required file. If the file does not exist, require will throw an error. require('path/to/file.js'); All required code is executed in the same namespace. Be careful about the execution order and polluting properties.","keywords":"","version":"Next"},{"title":"Space","type":0,"sectionRef":"#","url":"/phoenix/api/space","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Space","url":"/phoenix/api/space#interface","content":" class Space implements Identifiable, Iterable static Space active() // macOS 10.11+ static Array&lt;Space&gt; all() // macOS 10.11+ boolean isNormal() boolean isFullScreen() Array&lt;Screen&gt; screens() Array&lt;Window&gt; windows(Map&lt;String, AnyObject&gt; optionals) void addWindows(Array&lt;Window&gt; windows) void removeWindows(Array&lt;Window&gt; windows) void moveWindows(Array&lt;Window&gt; windows) end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Space","url":"/phoenix/api/space#static-methods","content":" active() returns the space containing the window with the keyboard focus (macOS 10.11+, returns undefined otherwise)all() returns all spaces, the first space in this array corresponds to the primary space (macOS 10.11+, returns an empty list otherwise)  ","version":"Next","tagName":"h2"},{"title":"Instance Methods​","type":1,"pageTitle":"Space","url":"/phoenix/api/space#instance-methods","content":" isNormal() returns true if the space is a normal spaceisFullScreen() returns true if the space is a full screen spacescreens() returns all screens to which the space belongs towindows(Map&lt;String, AnyObject&gt; optionals) returns all windows for the space if no optionals are givenaddWindows(Array&lt;Window&gt; windows) adds the given windows to the space (&lt; macOS 12.0)removeWindows(Array&lt;Window&gt; windows) removes the given windows from the space (&lt; macOS 12.0)  ","version":"Next","tagName":"h2"},{"title":"3.0.0+​","type":1,"pageTitle":"Space","url":"/phoenix/api/space#300","content":" moveWindows(Array&lt;Window&gt; windows) moves the given windows to the space (macOS 10.13+, &lt; 13.6, &lt; 14.5, &lt; 15.0)  ","version":"Next","tagName":"h3"},{"title":"Optionals​","type":1,"pageTitle":"Space","url":"/phoenix/api/space#optionals","content":" visible (boolean): if set true returns all visible windows for the space, if set false returns all hidden windows for the space  ","version":"Next","tagName":"h3"},{"title":"Events​","type":1,"pageTitle":"Space","url":"/phoenix/api/space#events","content":" See Events for a list of available events for Space.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Space","url":"/phoenix/api/space#example","content":" // Move focused window to the next space and focus to the space (macOS 12.0+) const space = Space.active(); const window = Window.focused(); space.next().moveWindows([window]); window.focus(); // Move focused window to the next space and focus to the space (&lt; macOS 12.0) const space = Space.active(); const window = Window.focused(); space.next().addWindows([window]); space.removeWindows([window]); window.focus();  ","version":"Next","tagName":"h2"},{"title":"Screen","type":0,"sectionRef":"#","url":"/phoenix/api/screen","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Screen","url":"/phoenix/api/screen#interface","content":" class Screen implements Identifiable, Iterable static Screen main() static Array&lt;Screen&gt; all() String identifier() Rectangle frame() Rectangle visibleFrame() Rectangle flippedFrame() Rectangle flippedVisibleFrame() Space currentSpace() // macOS 10.11+ Array&lt;Space&gt; spaces() // macOS 10.11+ Array&lt;Window&gt; windows(Map&lt;String, AnyObject&gt; optionals) end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Screen","url":"/phoenix/api/screen#static-methods","content":" main() returns the screen containing the window with the keyboard focusall() returns all screens, the first screen in this array corresponds to the primary screen for the system  ","version":"Next","tagName":"h2"},{"title":"Instance Methods​","type":1,"pageTitle":"Screen","url":"/phoenix/api/screen#instance-methods","content":" identifier() returns the UUID for the screenframe() returns the whole frame for the screen, bottom left based originvisibleFrame() returns the visible frame for the screen subtracting the Dock and Menu from the frame when visible, bottom left based originflippedFrame() returns the whole frame for the screen, top left based originflippedVisibleFrame() returns the visible frame for the screen subtracting the Dock and Menu from the frame when visible, top left based origincurrentSpace() returns the current space for the screen (macOS 10.11+, returns undefined otherwise)spaces() returns all spaces for the screen (macOS 10.11+, returns an empty list otherwise)windows(Map&lt;String, AnyObject&gt; optionals) returns all windows for the screen if no optionals are given  ","version":"Next","tagName":"h2"},{"title":"Optionals​","type":1,"pageTitle":"Screen","url":"/phoenix/api/screen#optionals","content":" visible (boolean): if set true returns all visible windows for the screen, if set false returns all hidden windows for the screen  ","version":"Next","tagName":"h3"},{"title":"Events​","type":1,"pageTitle":"Screen","url":"/phoenix/api/screen#events","content":" See Events for a list of available events for Screen.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Screen","url":"/phoenix/api/screen#example","content":" // Get all available screens const screens = Screen.all(); // Get visible frame for the main screen const frame = Screen.main().visibleFrame(); // Get all windows on the main screen Screen.main().windows(); // Get all visible windows on the main screen Screen.main().windows({ visible: true });  ","version":"Next","tagName":"h2"},{"title":"Modal","type":0,"sectionRef":"#","url":"/phoenix/api/modal","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Modal","url":"/phoenix/api/modal#interface","content":" class Modal implements Identifiable static Modal build(Map&lt;String, AnyObject&gt; properties) property Point origin property double duration property double animationDuration property double weight property String appearance property boolean hasShadow property Image icon property String text property String textAlignment property String font property boolean isInput property String inputPlaceholder property Function didResize property Function textDidChange property Function textDidCommit constructor Modal Modal() void setTextColour(double red, double green, double blue, double alpha) // or setTextColor(...) Rectangle frame() void show() Modal show() // 4.0.0+ void focus() void close() end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Modal","url":"/phoenix/api/modal#static-methods","content":" build(Map&lt;String, AnyObject&gt; properties) builds a modal with the specified properties and returns it, origin should be a function that receives the frame for the modal as the only argument and returns a Point object which will be set as the origin for the modal, in 4.0.0+ for convenience the origin function will also be bound to didResize so the modal will reposition automatically on resize, you must keep a reference to the modal in order for it to stay active  ","version":"Next","tagName":"h2"},{"title":"Instance Properties​","type":1,"pageTitle":"Modal","url":"/phoenix/api/modal#instance-properties","content":" origin dynamic property for the origin of the modal, the enclosed properties are read-only so you must pass an object for this property, bottom left based origin, by default (0, 0)duration property for the duration (in seconds) before automatically closing the modal, if the duration is set to 0 the modal will remain open until closed, by default 0animationDuration property for the animation duration (in seconds) for showing and closing the modal, if the duration is set to 0 the animation will be disabled, by default 0.2weight dynamic property for the weight of the modal (in points), by default 24appearance property for the appearance of the modal (dark|light|transparent), by default darkicon dynamic property for the icon displayed in the modal, by default undefined, set to null to remove icontext dynamic property for the text displayed in the modal, by default empty  ","version":"Next","tagName":"h2"},{"title":"3.0.0+​","type":1,"pageTitle":"Modal","url":"/phoenix/api/modal#300","content":" hasShadow property for whether the modal has a shadow, by default truetextAlignment property for the alignment of the text (left|right|centre|center), by default leftfont dynamic property for the font name used for the text, by default the system fontisInput property for whether the modal behaves as an input modal, by default falseinputPlaceholder property for the placeholder string that will be displayed when the input is empty, by default emptytextDidChange callback function to call when the input modal’s text field value changes, receives the value as the first argument for the callback  ","version":"Next","tagName":"h3"},{"title":"4.0.0+​","type":1,"pageTitle":"Modal","url":"/phoenix/api/modal#400","content":" didResize callback function to call when the modal resizestextDidCommit callback function to call when the input modal’s text field is committed, receives the value as the first argument and the action (return|tab|backtab|undefined) as the second argument for the callback  ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"Modal","url":"/phoenix/api/modal#constructor","content":" new Modal() constructs and returns a new modal, you must keep a reference to the modal in order for it to stay active  ","version":"Next","tagName":"h2"},{"title":"Instance Methods​","type":1,"pageTitle":"Modal","url":"/phoenix/api/modal#instance-methods","content":" frame() returns the frame for the modal, the frame is adjusted for the current content, therefore you must first set the weight, icon, text and/or set it as an input to get an accurate frame, an input modal has a fixed width of 600, bottom left based originshow() shows the modal, you must set at least an icon, text and/or set it as an input for the modal to be displayed, in 4.0.0+ returns the modal, in prior versions returns nothingclose() closes the modal  ","version":"Next","tagName":"h2"},{"title":"3.0.0+​","type":1,"pageTitle":"Modal","url":"/phoenix/api/modal#300-1","content":" setTextColour(double red, double green, double blue, double alpha) or setTextColor(...) sets a custom text colour with the given RGBA values, for example setTextColor(34, 139, 34, 1)  ","version":"Next","tagName":"h3"},{"title":"4.0.0+​","type":1,"pageTitle":"Modal","url":"/phoenix/api/modal#400-1","content":" focus() focuses the modal and makes it the key window to receive events  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Modal","url":"/phoenix/api/modal#example","content":" // Build and show a modal for half a second const modal = Modal.build({ duration: 0.5, weight: 48, appearance: 'dark', icon: App.get('Phoenix').icon(), text: 'Hello World!', }).show(); // Build and show a modal in the middle of the main screen const screenFrame = Screen.main().flippedVisibleFrame(); const modal = Modal.build({ text: 'Hello World!', origin: (frame) =&gt; ({ x: screenFrame.width / 2 - frame.width / 2, y: screenFrame.height / 2 - frame.height / 2, }), }).show(); // Show an input modal in the middle of the main screen const screenFrame = Screen.main().flippedVisibleFrame(); const modal = new Modal(); modal.isInput = true; modal.appearance = 'light'; modal.origin = { x: screenFrame.width / 2 - modal.frame().width / 2, y: screenFrame.height / 2 - modal.frame().height / 2, }; modal.textDidChange = (value) =&gt; { console.log('Text did change:', value); }; modal.textDidCommit = (value, action) =&gt; { console.log('Text did commit:', value, action); }; modal.show();  ","version":"Next","tagName":"h2"},{"title":"Storage","type":0,"sectionRef":"#","url":"/phoenix/api/storage","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Storage","url":"/phoenix/api/storage#interface","content":" class Storage static void set(String key, AnyObject value) static AnyObject get(String key) static void remove(String key) end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Storage","url":"/phoenix/api/storage#static-methods","content":" set(String key, AnyObject value) stores the value for the key, any previously set value with the same key will be overriddenget(String key) retrieves and returns the value for the key (undefined if no value has been set)remove(String key) removes the key and the value associated with it  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Storage","url":"/phoenix/api/storage#example","content":" // Set a value Storage.set('key', 'value'); Storage.set('height', 100); Storage.set('isEnabled', true); Storage.set('settings', { isEnabled: true }); // Get a value const value = Storage.get('key'); Phoenix.log(value); // -&gt; 'value' // Remove a value Storage.remove('key');  ","version":"Next","tagName":"h2"},{"title":"Task","type":0,"sectionRef":"#","url":"/phoenix/api/task","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Task","url":"/phoenix/api/task#interface","content":" class Task implements Identifiable static int run(String path, Array arguments, Function callback) static void terminate(int identifier) property int status property String output property String error constructor Task Task(String path, Array arguments, Function callback) void terminate() end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Task","url":"/phoenix/api/task#static-methods","content":" run(String path, Array arguments, Function callback) constructs a managed handler for a task and returns the identifier for the handler, for arguments see new Task(...)terminate(int identifier) terminates the managed handler for a task with the given identifier  ","version":"Next","tagName":"h2"},{"title":"Instance Properties​","type":1,"pageTitle":"Task","url":"/phoenix/api/task#instance-properties","content":" status read-only property for the termination statusoutput read-only property for the standard outputerror read-only property for the standard error  ","version":"Next","tagName":"h2"},{"title":"Constructor​","type":1,"pageTitle":"Task","url":"/phoenix/api/task#constructor","content":" new Task(String path, Array arguments, Function callback) constructs a task that asynchronously executes an absolute path with the given arguments and returns the handler, you must keep a reference to the handler in order for your callback to get called, the callback function receives its handler as the only argument  ","version":"Next","tagName":"h2"},{"title":"Instance Methods​","type":1,"pageTitle":"Task","url":"/phoenix/api/task#instance-methods","content":" terminate() terminates the task immediately  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Task","url":"/phoenix/api/task#example","content":" // Run “uptime” and log output Task.run('/usr/bin/uptime', [], (task) =&gt; { console.log('Status:', task.status); // -&gt; 'Status: 0' console.log('Output:', task.output); // -&gt; 'Output: 13:30 up 2:08, 3 users, load averages: 4,18 3,83 5,25' }); // Open a file Task.run('/usr/bin/open', ['/path/to/file.txt']); // Fetch a JSON Task.run('/usr/bin/curl', ['-s', 'https://api.github.com/repos/kasper/phoenix/releases'], (task) =&gt; { console.log('Result:', JSON.parse(task.output)); // -&gt; '[object Object], ...' });  ","version":"Next","tagName":"h2"},{"title":"About Coordinates","type":0,"sectionRef":"#","url":"/phoenix/getting-started/about-coordinates","content":"About Coordinates macOS has two commonly used coordinate systems: for higher level elements the origo (0, 0) is situated in the bottom left corner of the screen, on the contrary for lower level elements the origo is situated in the top left corner of the screen (flipped). This API has no distinction between these systems — Points can represent both cases. The larger part of the API uses a flipped top left based origin, unless otherwise is stated.","keywords":"","version":"Next"},{"title":"Timer","type":0,"sectionRef":"#","url":"/phoenix/api/timer","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Timer","url":"/phoenix/api/timer#interface","content":" class Timer implements Identifiable static int after(double interval, Function callback) static int every(double interval, Function callback) static void off(int identifier) constructor Timer Timer(double interval, boolean repeats, Function callback) void stop() end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Timer","url":"/phoenix/api/timer#static-methods","content":" after(double interval, Function callback) constructs a managed handler for a timer that fires only once and returns the identifier for the handler, for arguments see new Timer(...)every(double interval, Function callback) constructs a managed handler for a timer that fires repeatedly and returns the identifier for the handler, for arguments see new Timer(...)off(int identifier) disables the managed handler for a timer with the given identifier  ","version":"Next","tagName":"h2"},{"title":"Constructor​","type":1,"pageTitle":"Timer","url":"/phoenix/api/timer#constructor","content":" new Timer(double interval, boolean repeats, Function callback) constructs a timer that fires the callback once or repeatedly until stopped with the given interval (in seconds) and returns the handler, you must keep a reference to the handler in order for your callback to get called, the callback function receives its handler as the only argument  ","version":"Next","tagName":"h2"},{"title":"Instance Methods​","type":1,"pageTitle":"Timer","url":"/phoenix/api/timer#instance-methods","content":" stop() stops the timer immediately  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Timer","url":"/phoenix/api/timer#example","content":" // Call callback once after 500 ms Timer.after(0.5, () =&gt; { console.log('500 ms passed.'); }); // Call callback every 5 seconds const identifier = Timer.every(5, () =&gt; { console.log('5 seconds passed.'); }); // Disable the handler Timer.off(identifier);  ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/phoenix/getting-started/introduction","content":"","keywords":"","version":"Next"},{"title":"Supported APIs​","type":1,"pageTitle":"Introduction","url":"/phoenix/getting-started/introduction#supported-apis","content":" See below for an overview of the supported APIs. To read more, check the respective API documentation pages.  API\tDescriptionKeys\tLists all the available keys for binding callbacks to Events\tLists all the available events for binding callbacks to Preferences\tConfigure the behaviour of Phoenix Require\tSeparate your configuration into multiple files Phoenix\tAccess global APIs and actions Storage\tUse Storage to store values across reloads and reboots as JSON Point\tA simple point object for 2D coordinates Size\tA simple 2D size object Rectangle\tA 2D rectangle representation of a Point and Size Identifiable\tObjects that implement Identifiable can be identified and compared Iterable\tObjects that implement Iterable can be traversed relatively to the current object Key\tUse Key to construct keys, bind callbacks, access their properties, and enable or disable them Event\tUse Event to construct events, bind callbacks, access their properties or disable them Timer\tUse Timer to construct and control timers Task\tUse Task to construct external tasks (such as running scripts), access their properties or terminate them Image\tUse Image to load images from the file system Modal\tUse Modal to display content as modal windows (in front of all other windows). Modals can be used to display icons and/or text for visual cues. Screen\tUse Screen to access frame sizes and other screens on a multi-screen setup Space\tUse the Space to control spaces Mouse\tUse the Mouse to control the cursor App\tUse App to control apps Window\tUse Window to control app windows ","version":"Next","tagName":"h2"},{"title":"Loading","type":0,"sectionRef":"#","url":"/phoenix/getting-started/loading","content":"Loading Your configuration file is loaded when the app launches. All functions are evaluated (and executed if necessary) when this happens. Phoenix also reloads the configuration when any changes are detected to the file(s). You may also reload the configuration manually from the status bar or programmatically from your script. The following locations are valid configuration paths and the first existing file will be used. Whilst loading, all symlinks will be resolved, so in the end your configuration can also be a symlink to any desired destination. ~/.phoenix.js~/Library/Application Support/Phoenix/phoenix.js~/.config/phoenix/phoenix.js note If you delete your main configuration file while Phoenix is still running, Phoenix will create a blank file in its place. Be sure and quit Phoenix when switching between using the ~/.phoenix.js, ~/Library/Application Support/Phoenix/phoenix.js or ~/.config/phoenix/phoenix.js configuration files. Debug Build You may also use these paths for the debug configuration (with a suffix of .debug.js), if you are using a debug build of Phoenix.","keywords":"","version":"Next"},{"title":"Managing Handlers","type":0,"sectionRef":"#","url":"/phoenix/getting-started/managing-handlers","content":"Managing Handlers As previously mentioned you must keep a reference to your handlers, otherwise your callbacks will not get called. In return, if you release the reference to the handler, it will also be disabled eventually. Beware that this can be rather delayed and you are always safer to manually disable the handlers before letting the reference go. This gives you full control over the lifecycle of your handlers and can be especially useful when you want to dynamically create handlers. Obviously, in most cases you do not want to worry about the lifecycle of your handlers. This is why Phoenix also provides managed handlers that are held for you. You can use these managed handlers to set keys, events, timers and tasks, but also to disable them. Basically, when you create a managed handler, the handler is constructed and its reference is stored. You will get an identifier for the handler which you can then use to disable it. When you disable the handler, Phoenix will take care of properly disposing it for you. For example, to bind a key to a function. Key.on('q', ['control', 'shift'], () =&gt; {}); You can disable the handler with its identifier. const identifier = Key.on('q', ['control', 'shift'], () =&gt; {}); Key.off(identifier); ","keywords":"","version":"Next"},{"title":"Logging and Debugging","type":0,"sectionRef":"#","url":"/phoenix/getting-started/logging-and-debugging","content":"","keywords":"","version":"Next"},{"title":"Web Inspector​","type":1,"pageTitle":"Logging and Debugging","url":"/phoenix/getting-started/logging-and-debugging#web-inspector","content":" To debug your configuration, use Safari’s Web Inspector. You can attach to the context from Safari’s “Develop” menu under your devices name. Read a more comprehensive instruction to get started. In the Web Inspector’s Console you can also see messages outputted with console.log.  note Due to macOS security restrictions, this only works on non-notarised versions of Phoenix (2.6.2 or older) or with debug builds built from the source. ","version":"Next","tagName":"h2"},{"title":"Preprocessing","type":0,"sectionRef":"#","url":"/phoenix/getting-started/preprocessing","content":"Preprocessing You may add JavaScript preprocessing to your configuration by adding a Shebang-directive to the beginning of your file. It must be the first statement in your file. Phoenix should support all popular JavaScript compilers, but be aware that you need to have the compiler installed on your setup and accessible through your shell’s PATH for Phoenix to find it. You also need to ask the compiler to output to the standard output so Phoenix is able to evaluate the result. For example, use Babel to use ECMAScript 6 JavaScript in macOS versions prior to Sierra: #!/usr/bin/env babel Key.on('s', ['control', 'shift'], () =&gt; { App.launch('Safari', { focus: true }); }); Or alternatively, use CoffeeScript to write your configuration: #!/usr/bin/env coffee -p Key.on 's', ['control', 'shift'], -&gt; App.launch 'Safari', focus: true ","keywords":"","version":"Next"},{"title":"TypeScript","type":0,"sectionRef":"#","url":"/phoenix/getting-started/typescript","content":"TypeScript You can obviously build the Phoenix configuration using TypeScript. Use the phoenix-typings library for the API type definitions. Thanks @mafredri! 🙌","keywords":"","version":"Next"},{"title":"Window","type":0,"sectionRef":"#","url":"/phoenix/api/window","content":"","keywords":"","version":"Next"},{"title":"Interface​","type":1,"pageTitle":"Window","url":"/phoenix/api/window#interface","content":" class Window implements Identifiable static Window focused() static Window at(Point point) static Array&lt;Window&gt; all(Map&lt;String, AnyObject&gt; optionals) static Array&lt;Window&gt; recent() Array&lt;Window&gt; others(Map&lt;String, AnyObject&gt; optionals) String title() boolean isMain() boolean isNormal() boolean isFullScreen() boolean isMinimised() // or isMinimized() boolean isVisible() App app() Screen screen() Array&lt;Space&gt; spaces() // macOS 10.11+ Point topLeft() Size size() Rectangle frame() boolean setTopLeft(Point point) boolean setSize(Size size) boolean setFrame(Rectangle frame) boolean setFullScreen(boolean value) boolean maximise() // or maximize() boolean minimise() // or minimize() boolean unminimise() // or unminimize() Array&lt;Window&gt; neighbours(String direction) // or neighbors(...) boolean raise() boolean focus() boolean focusClosestNeighbour(String direction) // or focusClosestNeighbor(...) boolean close() end   ","version":"Next","tagName":"h2"},{"title":"Static Methods​","type":1,"pageTitle":"Window","url":"/phoenix/api/window#static-methods","content":" focused() returns the focused window for the currently active app, can be undefined if no window is focused currentlyat(Point point) returns the topmost window at the specified point, can be undefined if no window is present at the given positionall(Map&lt;String, AnyObject&gt; optionals) returns all windows in screens if no optionals are givenrecent() returns all visible windows in the order as they appear on the screen (from front to back), essentially returning them in the most-recently-used order  ","version":"Next","tagName":"h2"},{"title":"Window Optionals​","type":1,"pageTitle":"Window","url":"/phoenix/api/window#window-optionals","content":" visible (boolean): if set true returns all visible windows in screens, if set false returns all hidden windows in screens  ","version":"Next","tagName":"h3"},{"title":"Instance Methods​","type":1,"pageTitle":"Window","url":"/phoenix/api/window#instance-methods","content":" others(Map&lt;String, AnyObject&gt; optionals) returns all other windows on all screens if no optionals are giventitle() returns the title for the windowisMain() returns true if the window is the main window for its appisNormal() returns true if the window is a normal windowisFullScreen() returns true if the window is a full screen windowisMinimised() or isMinimized() returns true if the window is minimisedisVisible() returns true if the window is a normal and unminimised window that belongs to an unhidden appapp() returns the app for the windowscreen() returns the screen where most or all of the window is currently present, can be undefined if a window is out of bounds of any screenspaces() returns the spaces where the window is currently present (macOS 10.11+, returns an empty list otherwise)topLeft() returns the top left point for the windowsize() returns the size for the windowframe() returns the frame for the windowsetTopLeft(Point point) sets the top left point for the window, returns true if successfulsetSize(Size size) sets the size for the window, returns true if successfulsetFrame(Rectangle frame) sets the frame for the window, returns true if successfulsetFullScreen(boolean value) sets whether the window is full screen, returns true if successfulmaximise() or maximize() resizes the window to fit the whole visible frame for the screen, returns true if successfulminimise() or minimize() minimises the window, returns true if successfulunminimise() or unminimize() unminimises the window, returns true if successfulneighbours(String direction) or neighbors(...) returns windows to the direction (west|east|north|south) of the windowraise() makes the window the frontmost window of its app (but does not focus the app itself), returns true if successfulfocus() focuses the window, returns true if successfulfocusClosestNeighbour(String direction) or focusClosestNeighbor(...) focuses the closest window to the direction (west|east|north|south) of the window, returns true if successfulclose() closes the window, returns true if successful  ","version":"Next","tagName":"h2"},{"title":"Others Optionals​","type":1,"pageTitle":"Window","url":"/phoenix/api/window#others-optionals","content":" visible (boolean): if set true returns visible windows, if set false returns hidden windowsscreen (Screen): returns all other windows on the specified screen  ","version":"Next","tagName":"h3"},{"title":"Events​","type":1,"pageTitle":"Window","url":"/phoenix/api/window#events","content":" See Events for a list of available events for Window.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Window","url":"/phoenix/api/window#example","content":" // Return all windows across all screens const windows = Window.all(); // Move the focused window to origo Window.focused().setTopLeft({ x: 0, y: 0 }); // Resize the focused window Window.focused().setSize({ width: 1000, height: 500 }); // Resize the focused window to fill the full screen Window.focused().maximise();  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}