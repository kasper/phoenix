"use strict";(self.webpackChunk_phoenix_docs=self.webpackChunk_phoenix_docs||[]).push([[223],{2252:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"sidebar":[{"type":"link","label":"Phoenix","href":"/phoenix/","docId":"index","unlisted":false},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Introduction","href":"/phoenix/getting-started/introduction","docId":"getting-started/introduction","unlisted":false},{"type":"link","label":"Managing Handlers","href":"/phoenix/getting-started/managing-handlers","docId":"getting-started/managing-handlers","unlisted":false},{"type":"link","label":"Loading","href":"/phoenix/getting-started/loading","docId":"getting-started/loading","unlisted":false},{"type":"link","label":"Preprocessing","href":"/phoenix/getting-started/preprocessing","docId":"getting-started/preprocessing","unlisted":false},{"type":"link","label":"About Coordinates","href":"/phoenix/getting-started/about-coordinates","docId":"getting-started/about-coordinates","unlisted":false},{"type":"link","label":"Logging and Debugging","href":"/phoenix/getting-started/logging-and-debugging","docId":"getting-started/logging-and-debugging","unlisted":false},{"type":"link","label":"TypeScript","href":"/phoenix/getting-started/typescript","docId":"getting-started/typescript","unlisted":false}]},{"type":"category","label":"API","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"App","href":"/phoenix/api/app","docId":"api/app","unlisted":false},{"type":"link","label":"Event","href":"/phoenix/api/event","docId":"api/event","unlisted":false},{"type":"link","label":"Events","href":"/phoenix/api/events","docId":"api/events","unlisted":false},{"type":"link","label":"Identifiable","href":"/phoenix/api/identifiable","docId":"api/identifiable","unlisted":false},{"type":"link","label":"Image","href":"/phoenix/api/image","docId":"api/image","unlisted":false},{"type":"link","label":"Iterable","href":"/phoenix/api/iterable","docId":"api/iterable","unlisted":false},{"type":"link","label":"Key","href":"/phoenix/api/key","docId":"api/key","unlisted":false},{"type":"link","label":"Keys","href":"/phoenix/api/keys","docId":"api/keys","unlisted":false},{"type":"link","label":"Modal","href":"/phoenix/api/modal","docId":"api/modal","unlisted":false},{"type":"link","label":"Mouse","href":"/phoenix/api/mouse","docId":"api/mouse","unlisted":false},{"type":"link","label":"Phoenix","href":"/phoenix/api/phoenix","docId":"api/phoenix","unlisted":false},{"type":"link","label":"Point","href":"/phoenix/api/point","docId":"api/point","unlisted":false},{"type":"link","label":"Preferences","href":"/phoenix/api/preferences","docId":"api/preferences","unlisted":false},{"type":"link","label":"Rectangle","href":"/phoenix/api/rectangle","docId":"api/rectangle","unlisted":false},{"type":"link","label":"Require","href":"/phoenix/api/require","docId":"api/require","unlisted":false},{"type":"link","label":"Screen","href":"/phoenix/api/screen","docId":"api/screen","unlisted":false},{"type":"link","label":"Size","href":"/phoenix/api/size","docId":"api/size","unlisted":false},{"type":"link","label":"Space","href":"/phoenix/api/space","docId":"api/space","unlisted":false},{"type":"link","label":"Storage","href":"/phoenix/api/storage","docId":"api/storage","unlisted":false},{"type":"link","label":"Task","href":"/phoenix/api/task","docId":"api/task","unlisted":false},{"type":"link","label":"Timer","href":"/phoenix/api/timer","docId":"api/timer","unlisted":false},{"type":"link","label":"Window","href":"/phoenix/api/window","docId":"api/window","unlisted":false}]}]},"docs":{"api/app":{"id":"api/app","title":"App","description":"Use App to control apps. Beware that an app can get stale if you keep a reference to it and it is for instance terminated while you do so, refer to isTerminated().","sidebar":"sidebar"},"api/event":{"id":"api/event","title":"Event","description":"Use Event to construct events, bind callbacks, access their properties or disable them. You can have multiple handlers for a single event.","sidebar":"sidebar"},"api/events":{"id":"api/events","title":"Events","description":"Phoenix supports the following (case sensitive) events. Use these to construct an Event.","sidebar":"sidebar"},"api/identifiable":{"id":"api/identifiable","title":"Identifiable","description":"Objects that implement Identifiable can be identified and compared.","sidebar":"sidebar"},"api/image":{"id":"api/image","title":"Image","description":"Use Image to load images from the file system.","sidebar":"sidebar"},"api/iterable":{"id":"api/iterable","title":"Iterable","description":"Objects that implement Iterable can be traversed relatively to the current object.","sidebar":"sidebar"},"api/key":{"id":"api/key","title":"Key","description":"Use Key to construct keys, bind callbacks, access their properties, and enable or disable them. You can have multiple handlers for a single key combination, however only one can be enabled at a time.","sidebar":"sidebar"},"api/keys":{"id":"api/keys","title":"Keys","description":"All valid keys for binding are as follows:","sidebar":"sidebar"},"api/modal":{"id":"api/modal","title":"Modal","description":"Use Modal to display content as modal windows (in front of all other windows). Modals can be used to display icons and/or text for visual cues. An input modal can be used to input text for example to give commands. Properties defined as dynamic can be altered while the modal is displayed.","sidebar":"sidebar"},"api/mouse":{"id":"api/mouse","title":"Mouse","description":"Use the Mouse to control the cursor.","sidebar":"sidebar"},"api/phoenix":{"id":"api/phoenix","title":"Phoenix","description":"Use Phoenix for global APIs and actions.","sidebar":"sidebar"},"api/point":{"id":"api/point","title":"Point","description":"A simple point object for 2D coordinates.","sidebar":"sidebar"},"api/preferences":{"id":"api/preferences","title":"Preferences","description":"Phoenix supports the following (case sensitive) preferences:","sidebar":"sidebar"},"api/rectangle":{"id":"api/rectangle","title":"Rectangle","description":"A 2D rectangle representation of a Point and Size.","sidebar":"sidebar"},"api/require":{"id":"api/require","title":"Require","description":"You can modularise your configuration using the require function. It will load the referenced JavaScript file and reload it if any changes are detected. If the path is relative, it is resolved relatively to the absolute location of the primary configuration file. If this file is a symlink, it will be resolved before resolving the location of the required file. If the file does not exist, require will throw an error.","sidebar":"sidebar"},"api/screen":{"id":"api/screen","title":"Screen","description":"Use Screen to access frame sizes and other screens on a multi-screen setup. Beware that a screen can get stale if you keep a reference to it and it is for instance disconnected while you do so.","sidebar":"sidebar"},"api/size":{"id":"api/size","title":"Size","description":"A simple 2D size object.","sidebar":"sidebar"},"api/space":{"id":"api/space","title":"Space","description":"Use the Space to control spaces. These features are only supported on El Capitan (10.11) and upwards. A single window can be in multiple spaces at the same time. To move a window to a different space, remove it from any existing spaces and add it to a new one. In 3.0.0+, you can use the moveWindows(...) function. Beware that a space can get stale if you keep a reference to it and it is for instance closed while you do so.","sidebar":"sidebar"},"api/storage":{"id":"api/storage","title":"Storage","description":"Use Storage to store values across reloads and reboots as JSON.","sidebar":"sidebar"},"api/task":{"id":"api/task","title":"Task","description":"Use Task to construct external tasks (such as running scripts), access their properties or terminate them. Beware that some task properties are only set after the task has completed.","sidebar":"sidebar"},"api/timer":{"id":"api/timer","title":"Timer","description":"Use Timer to construct and control timers. A timer can fire only once or be repeating.","sidebar":"sidebar"},"api/window":{"id":"api/window","title":"Window","description":"Use Window to control app windows. Every screen (i.e. display) combines to form a large rectangle. Every window lives within this rectangle and their position can be altered by giving coordinates inside this rectangle. To position a window to a specific display, you need to calculate its position within the large rectangle. To figure out the coordinates for a given screen, use the functions in Screen. Beware that a window can get stale if you keep a reference to it and it is for instance closed while you do so.","sidebar":"sidebar"},"getting-started/about-coordinates":{"id":"getting-started/about-coordinates","title":"About Coordinates","description":"macOS has two commonly used coordinate systems: for higher level elements the origo (0, 0) is situated in the bottom left corner of the screen, on the contrary for lower level elements the origo is situated in the top left corner of the screen (flipped).","sidebar":"sidebar"},"getting-started/introduction":{"id":"getting-started/introduction","title":"Introduction","description":"Many of the API classes represent global objects in the script\u2019s context \u2014 methods that are marked as static can be accessed through these global objects. All other functions are instance methods. Instance objects can be accessed through the global objects or constructed with the relevant constructors.","sidebar":"sidebar"},"getting-started/loading":{"id":"getting-started/loading","title":"Loading","description":"Your configuration file is loaded when the app launches. All functions are evaluated (and executed if necessary) when this happens. Phoenix also reloads the configuration when any changes are detected to the file(s). You may also reload the configuration manually from the status bar or programmatically from your script.","sidebar":"sidebar"},"getting-started/logging-and-debugging":{"id":"getting-started/logging-and-debugging","title":"Logging and Debugging","description":"To log messages, use Phoenix.log. The messages are delivered to the Console (app). You can filter logs by process by searching for \u201cPhoenix\u201d. You can also follow the logs from a terminal by running log stream --process Phoenix.","sidebar":"sidebar"},"getting-started/managing-handlers":{"id":"getting-started/managing-handlers","title":"Managing Handlers","description":"As previously mentioned you must keep a reference to your handlers, otherwise your callbacks will not get called. In return, if you release the reference to the handler, it will also be disabled eventually. Beware that this can be rather delayed and you are always safer to manually disable the handlers before letting the reference go. This gives you full control over the lifecycle of your handlers and can be especially useful when you want to dynamically create handlers.","sidebar":"sidebar"},"getting-started/preprocessing":{"id":"getting-started/preprocessing","title":"Preprocessing","description":"You may add JavaScript preprocessing to your configuration by adding a Shebang)-directive to the beginning of your file. It must be the first statement in your file. Phoenix should support all popular JavaScript compilers, but be aware that you need to have the compiler installed on your setup and accessible through your shell\u2019s PATH for Phoenix to find it. You also need to ask the compiler to output to the standard output so Phoenix is able to evaluate the result.","sidebar":"sidebar"},"getting-started/typescript":{"id":"getting-started/typescript","title":"TypeScript","description":"You can obviously build the Phoenix configuration using TypeScript. Use the phoenix-typings library for the API type definitions. Thanks @mafredri! \ud83d\ude4c","sidebar":"sidebar"},"index":{"id":"index","title":"Phoenix","description":"A lightweight macOS window and app manager scriptable with JavaScript. You can also easily use languages which compile to JavaScript such as TypeScript. Phoenix aims for efficiency and a very small footprint. If you like the idea of scripting your own window or app management toolkit with JavaScript, Phoenix is probably going to give you the things you want. With Phoenix you can bind keyboard shortcuts and system events, and use these to interact with macOS.","sidebar":"sidebar"}}}}')}}]);