"use strict";(self.webpackChunk_phoenix_docs=self.webpackChunk_phoenix_docs||[]).push([[996],{3857:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=i(4848),r=i(8453);const a={},s="Key",o={id:"api/key",title:"Key",description:"Use Key to construct keys, bind callbacks, access their properties, and enable or disable them. You can have multiple handlers for a single key combination, however only one can be enabled at a time.",source:"@site/docs/api/key.md",sourceDirName:"api",slug:"/api/key",permalink:"/phoenix/api/key",draft:!1,unlisted:!1,editUrl:"https://github.com/kasper/phoenix/tree/master/docs/docs/api/key.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Iterable",permalink:"/phoenix/api/iterable"},next:{title:"Keys",permalink:"/phoenix/api/keys"}},l={},c=[{value:"Interface",id:"interface",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"Instance Properties",id:"instance-properties",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Instance Methods",id:"instance-methods",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"key",children:"Key"}),"\n",(0,t.jsx)(n.p,{children:"Use Key to construct keys, bind callbacks, access their properties, and enable or disable them. You can have multiple handlers for a single key combination, however only one can be enabled at a time."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Enabling a key combination that has been exclusively registered by another app will fail. macOS gives exclusivity to the first app that requests the key combination."})}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"keys",children:"Keys"})," for a list available keys for binding."]}),"\n",(0,t.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class Key implements Identifiable\n\n  static int on(String key, Array<String> modifiers, Function callback)\n  static void once(String key, Array<String> modifiers, Function callback)\n  static void off(int identifier)\n\n  property String key\n  property Array<String> modifiers\n\n  constructor Key Key(String key, Array<String> modifiers, Function callback)\n  boolean isEnabled()\n  boolean enable()\n  boolean disable()\n\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"static-methods",children:"Static Methods"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"on(String key, Array<String> modifiers, Function callback)"})," constructs a managed handler for a key and returns the identifier for the handler, for arguments see ",(0,t.jsx)(n.code,{children:"new Key(...)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"once(String key, Array<String> modifiers, Function callback)"})," constructs a managed handler for a key that is by default only triggered one time and then disabled, for more control you can explicitly return ",(0,t.jsx)(n.code,{children:"false"})," from the callback function and the handler will not be disabled until you return something else, for arguments see ",(0,t.jsx)(n.code,{children:"new Key(...)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"off(int identifier)"})," disables the managed handler for a key with the given identifier"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"instance-properties",children:"Instance Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"key"})," read-only property for the key character in lower case or case sensitive special key"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"modifiers"})," read-only property for the key modifiers in lower case"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"new Key(String key, Array<String> modifiers, Function callback)"})," constructs and binds the key character with the specified modifiers (can be an empty list) to a callback function and returns the handler, you must keep a reference to the handler in order for your callback to get called, you can have multiple handlers for a single key combination, only one can be enabled at a time, any previous handler for the same key combination will automatically be disabled, the callback function receives its handler as the first argument and as the second argument a boolean that indicates if the key was repeated (key combination is held down)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"instance-methods",children:"Instance Methods"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isEnabled()"})," returns ",(0,t.jsx)(n.code,{children:"true"})," if the key handler is enabled, by default ",(0,t.jsx)(n.code,{children:"true"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"enable()"})," enables the key handler, any previous handler for the same key combination will automatically be disabled, returns ",(0,t.jsx)(n.code,{children:"true"})," if successful"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"disable()"})," disables the key handler, returns ",(0,t.jsx)(n.code,{children:"true"})," if successful"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Bind \u201cControl + Shift + Q\u201d to a callback function\nconst identifier = Key.on('q', ['control', 'shift'], () => {\n  console.log('Key combination pressed.');\n});\n\n// Disable the handler and release the key combination\nKey.off(identifier);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(6540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);